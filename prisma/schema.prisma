// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Primary Content Models
model Source {
  name      String
  url       String      @id
  icon      String?
  banner    String?
  classes   String?
  ModSource ModSource[]
}

model Category {
  id         Int        @id @default(autoincrement())
  parentId   Int?       @default(0) @map("parentId")
  children   Category[] @relation("children")
  parent     Category?  @relation("children", fields: [parentId], references: [id])
  name       String
  name_short String
  url        String?
  classes    String?
  icon       String?
  Mod        Mod[]
}

model Mod {
  id                Int             @id @default(autoincrement())
  name              String
  banner            String?
  url               String          @unique
  description       String
  description_short String?
  install           String?
  created_at        DateTime?
  updated_at        DateTime?
  rating            BigInt          @default(1)
  total_downloads   BigInt          @default(0)
  total_views       BigInt          @default(0)
  category          Category        @relation(fields: [categoryId], references: [id])
  categoryId        Int
  ModSource         ModSource[]
  ModDownload       ModDownload[]
  ModScreenshot     ModScreenshot[]
}

// Relations
model ModDownload {
  mod   Mod     @relation(fields: [modId], references: [id])
  modId Int
  name  String?
  url   String

  @@id([modId, url])
}

model ModScreenshot {
  mod   Mod    @relation(fields: [modId], references: [id])
  modId Int
  url   String

  @@id([modId, url])
}

model ModSource {
  mod       Mod     @relation(fields: [modId], references: [id])
  modId     Int
  source    Source  @relation(fields: [sourceUrl], references: [url])
  sourceUrl String
  primary   Boolean @default(false)
  query     String

  @@id([modId, sourceUrl])
}

// User Accounts & Authentication
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
